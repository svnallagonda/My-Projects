#code:
const sharp = require("sharp");
const path = require("path");
const AWS = require("aws-sdk");
AWS.config.update({region: "ap-south-1", });
const s3 = new AWS.S3();
const processedImageBucket = "serverless-bucket-processed-images";
exports.handler = async (event, context, callback) => {
console.log("An object was added to S3 bucket", JSON.stringify(event));
let records = event.Records;
let size = records.length;
for (let index = 0; index < size; index++) {
let record = records[index];
console.log("Record: ", record);
let fileName = path.parse(record.s3.object.key).name;
let filePath = path.parse(record.s3.object.key).dir;
let fileExt = path.parse(record.s3.object.key).ext;
console.log("filePath:" + filePath + ", fileName:" + fileName+", fileExt:"+fileExt);
let imageObjectParam = {
Bucket: record.s3.bucket.name, Key: record.s3.object.key, };
let imageObject = await s3.getObject(imageObjectParam).promise();
let resized_thumbnail = await sharp(imageObject.Body)
.resize({
width: 300, height: 300, fit: sharp.fit.cover,
})
.withMetadata()
.toBuffer();
console.log("thumbnail image created");
let resized_coverphoto = await sharp(imageObject.Body)
.resize({
width: 800, height: 800, fit: sharp.fit.cover, })
.withMetadata()
.toBuffer();
console.log("coverphoto image created");
let thumbnailImageParam = {
Body: resized_thumbnail,
Bucket: processedImageBucket,
Key: fileName + "_thumbnail" + fileExt,
CacheControl: "max-age=3600", 
ContentType: "image/" + fileExt.substring(1), };
let result1 = await s3.putObject(thumbnailImageParam).promise();
console.log("thumbnail image uploaded:" + JSON.stringify(result1));
let coverphotoImageParam = {
Body: resized_coverphoto,
Bucket: processedImageBucket,
Key: fileName + "_coverphoto" + fileExt, 
CacheControl: "max-age=3600",
ContentType: "image/" + fileExt.substring(1), };
let result2 = await s3.putObject(coverphotoImageParam).promise();
console.log("coverphoto image uploaded:" + JSON.stringify(result2));
}
}
